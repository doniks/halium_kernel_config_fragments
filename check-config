#!/bin/bash

set -e

if [ $# -ne 2 -a $# -ne 3 ] ; then
    echo "
USAGE: check-config [-w] KCONFIG KCONFIGFRAGMENT
EXAMPLE: ./check-config [-w] ../halium/kernel/google/msm/arch/arm/config/lineageos_flo_defconfig mer
"
    exit 1
fi

write=false
if [ "$1" = "-w" ]; then
    write=true
    shift
fi

file=$1
patch=$2
if [ ! -f $file ] ; then
    echo "Cannot find kernel config file \"$file\""
    exit 1
fi
if [ ! -f $patch ] ; then
    echo "Cannot find kernel config fragment \"$patch\""
    exit 1
fi



ered() {
	echo -ne "\033[31m$@"
}

egreen() {
	echo -ne "\033[32m$@"
}

ewhite() {
	echo -ne "\033[37m$@"
}

count() {
    file=$1
    config=$2
    grep -c -Ee "^CONFIG_$config=|^# CONFIG_$config is not set" $file || true
}

get() {
    file=$1
    config=$2
    sed -ne "
s/^CONFIG_$config=\(.*\)/\1/p;
s/^# *CONFIG_$config is not set/n/p;
" $file
}

add() {
    file=$1
    config=$2
    value=$3
    if [ "$value" = "n" ] ; then
	echo "# CONFIG_$config is not set" >> $file
    else
	echo "CONFIG_$config=$value" >> $file
    fi
}
 
change() {
    file=$1
    config=$2
    value=$3
    if [ "$value" = "n" ] ; then
	sed  -i "s/CONFIG_$config=.*/# CONFIG_$config is not set/" $file
    else
	sed -i "
s#^CONFIG_$config=\(.*\)#CONFIG_$config=$value#;
s#^\# *CONFIG_$config is not set#CONFIG_$config=$value#;
" $file
    fi
}

ewhite "\nChecking config file \""
egreen "$file"
ewhite "\" with config options from fragment \""
egreen "$patch"
ewhite "\"\n\n"

errors=0
fixes=0

config_values=$( sed -ne '
s/^CONFIG_\([a-zA-Z0-9_]*\)=.*/\1/p;
s/^# *CONFIG_\([a-zA-Z0-9_]*\) is not set/\1/p;
' < $patch )


if $write ; then
    backup=${file}_$(date +%Y%m%d-%H%M%S)
    cp $file $backup
    ewhite "Creating backupfile \"$backup\"\n"
fi


for c in $config_values ; do
    cnt=$(count $file $c)
    if [ $cnt -gt 1 ] ; then
	ered "$c appears more than once in the config file \"$file\", fix this!\n"
	exit 1
    fi
    if [ $(count $patch $c) -gt 1 ] ; then
	ered "$c appears more than once in the patch file \"$patch\", fix this!\n"
	exit 1
    fi

    current=$(get $file $c)
    target=$(get $patch $c)

    ewhite "$c: "
    if [ "$current" = "" ] ; then
	errors=$((errors+1))
	if $write ; then
	    add $file $c $target
	    egreen "unset -> $target .. FIXED\n"
	else
	    ered "unset -> $target .. NOT OK\n"
	fi
    else
	if [ "$current" = "$target" ] ; then
	    egreen "$current .. OK\n"
	else
	    errors=$((errors+1))
	    if $write ; then
		change $file $c $target
		egreen "$current -> $target .. FIXED\n"
	    else
		ered "$current -> $target .. NOT OK\n"
	    fi
	fi
    fi
done


ewhite "\nConfig file checked, "
if [ $errors -eq 0 ];then
    egreen "found no errors"
else
    if $write ; then
	egreen "fixed $errors errors"
    else
	ered "found $errors errors"
    fi
fi
ewhite "\n"
